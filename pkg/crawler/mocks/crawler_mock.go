// Code generated by MockGen. DO NOT EDIT.
// Source: crawler.go

// Package mock_crawler is a generated GoMock package.
package mock_crawler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICrawler is a mock of ICrawler interface.
type MockICrawler struct {
	ctrl     *gomock.Controller
	recorder *MockICrawlerMockRecorder
}

// MockICrawlerMockRecorder is the mock recorder for MockICrawler.
type MockICrawlerMockRecorder struct {
	mock *MockICrawler
}

// NewMockICrawler creates a new mock instance.
func NewMockICrawler(ctrl *gomock.Controller) *MockICrawler {
	mock := &MockICrawler{ctrl: ctrl}
	mock.recorder = &MockICrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICrawler) EXPECT() *MockICrawlerMockRecorder {
	return m.recorder
}

// ExtractLinks mocks base method.
func (m *MockICrawler) ExtractLinks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractLinks")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractLinks indicates an expected call of ExtractLinks.
func (mr *MockICrawlerMockRecorder) ExtractLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractLinks", reflect.TypeOf((*MockICrawler)(nil).ExtractLinks))
}

// SpinUpCrawler mocks base method.
func (m *MockICrawler) SpinUpCrawler() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SpinUpCrawler")
}

// SpinUpCrawler indicates an expected call of SpinUpCrawler.
func (mr *MockICrawlerMockRecorder) SpinUpCrawler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpinUpCrawler", reflect.TypeOf((*MockICrawler)(nil).SpinUpCrawler))
}
